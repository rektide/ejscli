#!/usr/bin/env node
"use strict"

var
  ejs= require( "ejs"),
  fs= require( "mz/fs"),
  util= require( "util"),
  minimist= require( "minimist")

// parse args
var
  alias= {c: "ctx", o: "options"},
  args= minimist(process.argv.slice(2), {alias})

// read the template
var
  file= args._[0],
  useStdin= file=== "-"|| file=== undefined,
  template= useStdin? require( "get-stdin")(): fs.readFile( file, "utf8")

// read and merge a list of files
async function readMerge( files){
	var 
	  arrayitized= (typeof( files)=== "string"? [ files]: files)|| [],
	  jsons= arrayitized.map( async c=> JSON.parse( await fs.readFile(c, "utf8"))),
	  all= await Promise.all( jsons),
	  merged= all.length=== 0? {}: Object.assign.apply(Object, all)
	return merged
};

// read ctx and options
var
  ctx= readMerge( args.ctx),
  options= readMerge( args.options);

// run main program
(async function(){
	var
	  _template= await template,
	  _options= await options,
	  _ctx= await ctx
	console.log({ _options, _ctx, _template})
	return ejs.compile( _template, _options)( _ctx)
})();

process.on("unhandledRejection", e=> {
	console.error(e)
})
